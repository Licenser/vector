[transforms.lua]
title = "Lua"
allow_you_to_description = "transform events with a full embedded [Lua][urls.lua] engine"
beta = true
common = true
function_category = "program"
input_types = ["log", "metric"]
output_types = ["log", "metric"]
requirements = {}

[transforms.lua.options.version]
type = "string"
common = true
required = true
description = """\
Transform API version. Specifying this version ensures that Vector does not \
break backward compatibility.\
"""
enum = { 2 = "Lua transform API version 2" }

[transforms.lua.options.search_dirs]
type = "[string]"
examples = [["/etc/vector/lua"]]
common = false
required = false
description = """\
A list of directories search when loading a Lua file via the `require` \
function.\
"""

[transforms.lua.options.hooks]
type = "table"
category = "Hooks"
common = true
required = true
description = "Configures hooks handlers."

[transforms.lua.options.hooks.children.init]
type = "string"
common = false
required = false
description = """\
A function which is called when the first event comes, before calling `hooks.process`\
"""
examples = [
"custom_module.hook_init",
"""\
function (emit)
  local f = io.popen ("/bin/hostname") -- run "hostname" command to determine the hostname
  hostname = f:read("*a") or "" -- set a global variable which can be used in other hooks
  f:close() -- close the pipe

  emit {
    log = {
      message = "initialized!"
    }
  }
end\
"""
]

[transforms.lua.options.hooks.children.process]
type = "string"
common = true
required = true
description = """\
A function which is called for each incoming event. It can produce new events using `emit` function.\
"""
examples = [
"""\
function (event, emit)
  event.log.field = "value" -- set value of a field
  event.log.another_field = nil -- remove field
  event.log.first, event.log.second = nil, event.log.first -- rename field
  emit(event) -- emit the processed event
end\
""",
"custom_module.hook_process"
]

[transforms.lua.options.hooks.children.shutdown]
type = "string"
common = false
required = false
description = """\
A function which is called when Vector is stopped. It can produce new events using `emit` function.\
"""
examples = [
"custom_module.hook_shutdown",
"""\
function (emit)
  emit {
    log = {
      message = "shutting down..."
    }
  }
end\
"""
]

[transforms.lua.options.timers]
type = "[table]"
category = "Timers"
common = false
required = false
description = "Configures timers which are executed periodically at given interval"

[transforms.lua.options.timers.children.interval_seconds]
type = "integer"
common = false
required = true
unit = "seconds"
description = """\
Defines the interval at which the timer handler would be executed.
"""
examples = [1, 10, 30]

[transforms.lua.options.timers.children.handler]
type = "string"
common = false
required = true
description = """\
Defines a handler function which is executed periodially at `interval_seconds`. It can produce new events using\
`emit` function.\
"""
examples = [
"custom_module.timer_handler",
"""\
function (emit)
  emit {
    log = {
      message = "current time: " .. os.date()
    }
  }
end\
"""
]
